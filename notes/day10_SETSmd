Set:(example01)
    Sets are used to store multiple items in a single variable.
    Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.
    A set is a collection which is unordered, unchangeable*, and unindexed.
* Note: Set items are unchangeable, but you can remove items and add new items.
    Sets are written with curly brackets.

Set Items:(example 02)
    Set items are unordered, unchangeable, and do not allow duplicate values.

unchangeable:(example03)
    Once a set is created, you cannot change its items, but you can remove items and add new items.
    removing also randomly removes when pop use otherwise remove() removes exact

Note: The values True and 1 are considered the same value in sets, and are treated as duplicates:
Note: The values False and 0 are considered the same value in sets, and are treated as duplicates:

Get the Length of a Set:
     To determine how many items a set has, use the len() function..

The set() Constructor: example(04)
     It is also possible to use the set() constructor to make a set.   

Access Items:(example 05)
     You cannot access items in a set by referring to an index or a key.
     But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.   

Add Sets:(example 06)
      To add items from another set into the current set, use the update() method.       

Join Sets
      There are several ways to join two or more sets in Python.
      The union() and update() methods joins all items from both sets.
      The intersection() method keeps ONLY the duplicates.
      The difference() method keeps the items from the first set that are not in the other set(s).
      The symmetric_difference() method keeps all items EXCEPT the duplicates.        


Union:
      The union() method returns a new set with all items from both sets.     (example07)
      You can use the | operator instead of the union() method, and you will get the same result

Join Multiple Sets:
      All the joining methods and operators can be used to join multiple sets.
      When using a method, just add more sets in the parentheses, separated by commas:    (example08)
      When using the | operator, separate the sets with more | operators:

Join a Set and a Tuple:
      The union() method allows you to join a set with other data types, like lists or tuples. (Example09)
      The result will be a set.

Note: The  | operator only allows you to join sets with sets, 
      and not with other data types like you can with the  union() method.

Update:
      The update() method inserts all items from one set into another.
      The update() changes the original set, and does not return a new set.  (example10)    

Intersection:(example11)
      Keep ONLY the duplicates
      The intersection() method will return a new set, that only contains the items that are present in both sets.      
      You can use the & operator instead of the intersection() method, and you will get the same result.

Note: The & operator only allows you to join sets with sets, and not with other data types like you can with the intersection() method.

The intersection_update() method :(example 12)
      will also keep ONLY the duplicates, but it will change the original set instead of returning a new set.
      The values True and 1 are considered the same value. The same goes for False and 0

Difference
The difference() method:(example13)
      will return a new set that will contain only the items from the first set that are not present in the other set.

The difference_update() method :(example14)
      will also keep the items from the first set that are not in the other set, but it will change the original set instead of returning a new set.      

Symmetric Differences (example15)
The symmetric_difference() method:
      will keep only the elements that are NOT present in both sets.      